/*
 * Copyright 2012 Mitch.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.unicornlabs.kabouter.devices.test;

import com.unicornlabs.kabouter.devices.messaging.DeviceServerMessage;
import com.unicornlabs.kabouter.util.JSONUtils;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JSlider;

/**
 *
 * @author Mitch
 */
public class TestLightDeviceGui extends javax.swing.JFrame {

    private Socket mySocket;
    private BufferedReader socketin;
    private PrintWriter socketout;
    private MessageReader myMessageReader;
    private LightManager myLightManager;
    private double desiredLDRValue = 0;
    private double currentLDRValue = 0;
    private double currentLightOutput = 0;

    /**
     * Creates new form TestDeviceGui
     */
    public TestLightDeviceGui() {
        setTitle("Kabouter Light Device");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        idField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        connectButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();
        ldrValue = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        tempValue = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        desiredLightValueField = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lightOutputValueField = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        idField.setText("Kabouter Device");

        jLabel1.setText("Device ID:");

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        outputArea.setColumns(20);
        outputArea.setRows(5);
        jScrollPane1.setViewportView(outputArea);

        ldrValue.setMaximum(1024);
        ldrValue.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ldrValueStateChanged(evt);
            }
        });

        jLabel3.setText("LDR:");

        tempValue.setText("0");

        jLabel4.setText("Desired Value:");

        desiredLightValueField.setText("0");

        jLabel5.setText("Light Output:");

        lightOutputValueField.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(connectButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ldrValue, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tempValue, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(desiredLightValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lightOutputValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(connectButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lightOutputValueField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ldrValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tempValue)
                        .addComponent(jLabel4)
                        .addComponent(desiredLightValueField)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        try {
            output("Connecting To localhost:4555");
            mySocket = new Socket(InetAddress.getLocalHost(), 4555);
            socketin = new BufferedReader(new InputStreamReader(mySocket.getInputStream()));
            socketout = new PrintWriter(new OutputStreamWriter(mySocket.getOutputStream()));

            output("Connection Established");

            DeviceServerMessage newMessage = new DeviceServerMessage();

            String devId = idField.getText();

            newMessage.messageType = DeviceServerMessage.DEVICE_CONFIG;
            newMessage.data = devId + ":ARDUINO_LIGHT";

            String jsonString = JSONUtils.ToJSON(newMessage);

            output("Sending Config Message");

            output("jsonString = " + jsonString);

            mySocket.getOutputStream().write(jsonString.getBytes());

            connectButton.setEnabled(false);
            idField.setEnabled(false);

            myMessageReader = new MessageReader(mySocket, this);
            myMessageReader.start();
            
            myLightManager = new LightManager(desiredLDRValue, this);
            myLightManager.start();

        } catch (IOException ex) {
            output(ex.getMessage());
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void ldrValueStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ldrValueStateChanged
        JSlider slider = (JSlider) evt.getSource();
        int value = slider.getValue();
        tempValue.setText(String.valueOf(value));
        currentLDRValue = value;
    }//GEN-LAST:event_ldrValueStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestLightDeviceGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestLightDeviceGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestLightDeviceGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestLightDeviceGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestLightDeviceGui().setVisible(true);
            }
        });
    }

    public void output(String text) {
        outputArea.append(text + "\n");
        outputArea.setCaretPosition(outputArea.getDocument().getLength());
    }

    private void setLightValue(double d) {
//        if(d<=0) {
//            currentLightOutput = 0;
//        } else if(d >= 1024) {
//            currentLightOutput = 1024;
//        }
        
        System.out.println("setting current light output to " +d);
        lightOutputValueField.setText(String.valueOf(d));
        currentLightOutput = d;
    }

    private static class MessageReader extends Thread {

        private Socket mySocket;
        private TestLightDeviceGui parent;
        private boolean alive;
        private BufferedReader br;

        public MessageReader(Socket mySocket, TestLightDeviceGui parent) throws IOException {
            this.mySocket = mySocket;
            this.parent = parent;
            this.alive = true;
            br = new BufferedReader(new InputStreamReader(mySocket.getInputStream()));
        }

        public void run() {
            while (alive) {
                try {
                    String message = br.readLine();
                    parent.output("Message recieved: " + message);
                    String[] split = message.split(":");
                    System.out.println("split[0] = " + split[0]);
                    if (split[0].contentEquals("\"light_value")) {

                        Double d = Double.parseDouble(split[1].substring(0, split[1].length() - 1));
                        parent.desiredLightValueField.setText(String.valueOf(d));
                        parent.desiredLDRValue = d;
                    }
                } catch (IOException ex) {
                    Logger.getLogger(TestLightDeviceGui.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private static class LightManager extends Thread {

        private double desiredValue;
        private TestLightDeviceGui parent;

        public LightManager(double desiredValue, TestLightDeviceGui parent) {
            this.desiredValue = desiredValue;
            this.parent = parent;
        }

        public void run() {
            while (true) {

                double diff = Math.abs(parent.desiredLDRValue - parent.currentLDRValue);
                System.out.println("diff = " + diff);

                if (diff > 200) {
                    if (parent.desiredLDRValue > parent.currentLDRValue) {
                        System.out.println("incrementing light");
                        double newValue = parent.currentLightOutput + 10;
                        System.out.println("newValue = " + newValue);
                        parent.setLightValue(newValue);
                    }
                    else {
                        System.out.println("decrementing light");
                        parent.setLightValue(parent.currentLightOutput - 10);
                    }
                }
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(TestLightDeviceGui.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel desiredLightValueField;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider ldrValue;
    private javax.swing.JLabel lightOutputValueField;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JLabel tempValue;
    // End of variables declaration//GEN-END:variables
}
