/*
 * Copyright 2012 Mitch.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.unicornlabs.kabouter.gui.automation;

import com.unicornlabs.kabouter.BusinessObjectManager;
import com.unicornlabs.kabouter.automation.AutomationManager;
import com.unicornlabs.kabouter.devices.DeviceManager;
import com.unicornlabs.kabouter.devices.DeviceStatus;
import com.unicornlabs.kabouter.historian.Historian;
import com.unicornlabs.kabouter.historian.data_objects.Automationrule;
import java.awt.Component;
import java.awt.Container;
import java.awt.event.ItemEvent;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Mitch
 */
public class AutomationRuleInfoPanel extends javax.swing.JPanel {
    
    private DeviceManager theDeviceManager;
    private Historian theHistorian;
    private Automationrule selectedAutomationRule = null;

    /**
     * Creates new form AutomationRuleDetailsPanel
     */
    public AutomationRuleInfoPanel() {
        initComponents();
        theDeviceManager = (DeviceManager) BusinessObjectManager.getBusinessObject(DeviceManager.class.getName());
        theHistorian = (Historian) BusinessObjectManager.getBusinessObject(Historian.class.getName());
        updateIdComboBoxes();
        enableComponents(this, false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        targetIdComboBox = new javax.swing.JComboBox();
        targetIoComboBox = new javax.swing.JComboBox();
        targetValueTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sourceIdComboBox = new javax.swing.JComboBox();
        sourceIoComboBox = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        functionComboBox = new javax.swing.JComboBox();
        variableTextField = new javax.swing.JTextField();
        applyButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Target"));

        jLabel1.setText("Target Device");

        jLabel2.setText("IO");

        targetIdComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        targetIdComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                targetIdComboBoxItemStateChanged(evt);
            }
        });

        targetIoComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        targetValueTextField.setText("jTextField1");

        jLabel5.setText("Value");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(targetIoComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(targetIdComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(targetValueTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(targetIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(targetIoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(targetValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Source"));

        jLabel3.setText("Source Device");

        jLabel4.setText("IO");

        sourceIdComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        sourceIdComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sourceIdComboBoxItemStateChanged(evt);
            }
        });

        sourceIoComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sourceIoComboBox, 0, 100, Short.MAX_VALUE)
                    .addComponent(sourceIdComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(sourceIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(sourceIoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Condition"));

        functionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        variableTextField.setText("jTextField1");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(functionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(variableTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(functionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(variableTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(applyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(applyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton)
                .addGap(13, 13, 13))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sourceIdComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sourceIdComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            updateSourceIoComboBox();
        }
    }//GEN-LAST:event_sourceIdComboBoxItemStateChanged
    
    private void targetIdComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_targetIdComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            updateTargetIoComboBox();
        }
    }//GEN-LAST:event_targetIdComboBoxItemStateChanged
    
    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        boolean newRule = false;
        
        if (selectedAutomationRule == null) {
            selectedAutomationRule = new Automationrule();
            newRule = true;
        }
        
        if ((sourceIdComboBox.getSelectedIndex() == -1)
                || (sourceIoComboBox.getSelectedIndex() == -1)
                || variableTextField.getText().contentEquals("")
                || functionComboBox.getSelectedIndex() == -1
                || targetIdComboBox.getSelectedIndex() == -1
                || targetIoComboBox.getSelectedIndex() == -1
                || targetValueTextField.getText().contentEquals("")) {
            JOptionPane.showMessageDialog(this, "All fields must be filled");
            return;
        }
        
        try {
        selectedAutomationRule.setSourceId((String) sourceIdComboBox.getSelectedItem());
        selectedAutomationRule.setSourceIoName((String) sourceIoComboBox.getSelectedItem());
        selectedAutomationRule.setSourceValue(Double.parseDouble(variableTextField.getText()));
        selectedAutomationRule.setSourceFunction((String) functionComboBox.getSelectedItem());
        selectedAutomationRule.setTargetId((String) targetIdComboBox.getSelectedItem());
        selectedAutomationRule.setTargetIoName((String) targetIoComboBox.getSelectedItem());
        selectedAutomationRule.setTargetValue(Double.parseDouble(targetValueTextField.getText()));
        } catch(NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Number Format Exception");
            return;
        }
        
        if(newRule) {
            theHistorian.saveAutomationrule(selectedAutomationRule);
        } else {
            theHistorian.updateAutomationrule(selectedAutomationRule);
        }
        
        AutomationPanel parent = (AutomationPanel) this.getParent();
        parent.refresh();
        enableComponents(this, false);
        
    }//GEN-LAST:event_applyButtonActionPerformed
    
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        theHistorian.deleteAutomationrule(selectedAutomationRule);
        AutomationPanel parent = (AutomationPanel) this.getParent();
        parent.refresh();
    }//GEN-LAST:event_deleteButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox functionComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JComboBox sourceIdComboBox;
    private javax.swing.JComboBox sourceIoComboBox;
    private javax.swing.JComboBox targetIdComboBox;
    private javax.swing.JComboBox targetIoComboBox;
    private javax.swing.JTextField targetValueTextField;
    private javax.swing.JTextField variableTextField;
    // End of variables declaration//GEN-END:variables

    void setSelectedRule(Automationrule rule) {
        
        enableComponents(this, true);
        selectedAutomationRule = rule;
        
        if (selectedAutomationRule != null) {
            sourceIdComboBox.setSelectedItem(rule.getSourceId());
            sourceIoComboBox.setSelectedItem(rule.getSourceIoName());
            functionComboBox.setSelectedItem(rule.getSourceFunction());
            variableTextField.setText(String.valueOf(rule.getSourceValue()));
            targetIdComboBox.setSelectedItem(rule.getTargetId());
            targetIoComboBox.setSelectedItem(rule.getTargetIoName());
            targetValueTextField.setText(String.valueOf(rule.getTargetValue()));
            deleteButton.setEnabled(true);
        } else {
            if (sourceIdComboBox.getItemCount() > 0) {
                sourceIdComboBox.setSelectedIndex(0);
            }
            if (sourceIoComboBox.getItemCount() > 0) {
                sourceIoComboBox.setSelectedIndex(0);
            }
            if (functionComboBox.getItemCount() > 0) {
                functionComboBox.setSelectedIndex(0);
            }
            variableTextField.setText("");
            if (targetIdComboBox.getItemCount() > 0) {
                targetIdComboBox.setSelectedIndex(0);
            }
            if (targetIoComboBox.getItemCount() > 0) {
                targetIoComboBox.setSelectedIndex(0);
            }
            targetValueTextField.setText("");
            deleteButton.setEnabled(false);
        }
        
    }
    
    public final void updateIdComboBoxes() {
        DeviceStatus[] deviceStatuses = theDeviceManager.getDeviceStatuses();
        
        sourceIdComboBox.removeAllItems();
        targetIdComboBox.removeAllItems();
        functionComboBox.removeAllItems();
        sourceIoComboBox.removeAllItems();
        targetIoComboBox.removeAllItems();
        
        for (DeviceStatus d : deviceStatuses) {
            sourceIdComboBox.addItem(d.theDevice.getId());
            targetIdComboBox.addItem(d.theDevice.getId());
        }
        
        for (String function : AutomationManager.FUNCTIONS) {
            functionComboBox.addItem(function);
        }
        
    }
    
    public final void updateSourceIoComboBox() {
        
        sourceIoComboBox.removeAllItems();
        
        String selectedSourceId = (String) sourceIdComboBox.getSelectedItem();
        
        System.out.println("selectedSourceId = " + selectedSourceId);
        
        DeviceStatus sourceStatus = theDeviceManager.getDeviceStatus(selectedSourceId);
        List<String> ionames = sourceStatus.theDevice.getIonames();
        List<String> iodirections = sourceStatus.theDevice.getIodirections();
        
        for (int i = 0; i < ionames.size(); i++) {
            if (iodirections.get(i).contentEquals("input")) {
                sourceIoComboBox.addItem(ionames.get(i));
            }
        }
    }
    
    public final void updateTargetIoComboBox() {
        targetIoComboBox.removeAllItems();
        
        String selectedTargetId = (String) targetIdComboBox.getSelectedItem();
        
        System.out.println("selectedTargetId = " + selectedTargetId);
        
        DeviceStatus targetStatus = theDeviceManager.getDeviceStatus(selectedTargetId);
        List<String> ionames = targetStatus.theDevice.getIonames();
        List<String> iodirections = targetStatus.theDevice.getIodirections();
        
        for (int i = 0; i < ionames.size(); i++) {
            if (iodirections.get(i).contentEquals("output")) {
                targetIoComboBox.addItem(ionames.get(i));
            }
        }
    }
    
    public final void enableComponents(Container container, boolean enable) {
        Component[] components = container.getComponents();
        for (Component component : components) {
            component.setEnabled(enable);
            if (component instanceof Container) {
                enableComponents((Container) component, enable);
            }
        }
    }
}
